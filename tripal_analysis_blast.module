<?php

require_once "includes/parse_blast_XML.inc";
require_once "includes/blast_settings_form.inc";
require_once "includes/chado_analysis_blast_form.inc";


/*******************************************************************************
 * Tripal Blast Result lets users show/hide blast results associated
 * with a tripal feature
 ******************************************************************************/
function tripal_analysis_blast_init() {
  // Add javascript and style sheet
  drupal_add_css(drupal_get_path('module',  'tripal_analysis_blast') .'/theme/css/tripal_analysis_blast.css', 'theme');
  drupal_add_js(drupal_get_path('module',   'tripal_analysis_blast') .'/theme/js/tripal_analysis_blast.js');
}

/*******************************************************************************
 * tripal_analysis_blast_menu()
 * HOOK: Implementation of hook_menu()
 * Entry points and paths of the module
 */
function tripal_analysis_blast_menu() {
	
	// Show top 10/25/all blast results for ajax calls
  $items['tripal_top_blast'] = array(
      'path' => 'top_blast',  
      'title' => t('Blast Hits'),  
      'page callback' => 'tripal_get_feature_blast_results_ajax',  
      'page arguments' => array(1, 2, 3), 
      'access arguments' => array('access content'),  
      'type' => MENU_CALLBACK
  );

   $items['admin/tripal/tripal_analysis/tripal_blast_analysis'] = array(
      'title' => 'BLAST Settings',  
      'description' => 'Settings for the displays of analysis results.',  
      'page callback' => 'drupal_get_form',  
      'page arguments' => array('tripal_analysis_blast_settings_form'),  
      'access arguments' => array('administer site configuration'),  
      'type' => MENU_NORMAL_ITEM,
  );  

  // Show regular expressions for selected database in Blast admin page
  $items['admin/tripal/tripal_analysis/tripal_blast_analysis/update_settings'] = array(
    'page callback' => 'tripal_analysis_blast_settings_form_callback',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}
/**
 *
 *
 * @ingroup tripal_analysis_blast
 */
function tripal_analysis_blast_block($op = 'list',   $delta = 0, $edit=array()) {
   switch ($op) {
      case 'list':
         $blocks['blast_base']['info'] = t('Analysis: Blast Details');
         $blocks['blast_base']['cache'] = BLOCK_NO_CACHE;


         $blocks['featureblast']['info'] = t('Tripal Feature Blast Results');
         $blocks['featureblast']['cache'] = BLOCK_NO_CACHE;

         
         return $blocks;


      case 'view':
         if (user_access('access chado_analysis_blast content') and arg(0) == 'node' and is_numeric(arg(1))) {
            $nid = arg(1);
            $node = node_load($nid);
 
            $block = array();
            switch ($delta) {
               case 'blast_base':
                  $block['subject'] = t('Blast Details');
                  $block['content'] = theme('tripal_analysis_blast_base',  $node);
                  break;
               case 'featureblast':
                  $block['subject'] = t('Homology');
                  $block['content'] = theme('tripal_feature_blast_results',  $node);
                  break;  
               default :
            }

            return $block;
         }
   }
}

/*******************************************************************************
 * tripal_analysis_blast_nodeapi()
 * HOOK: Implementation of hook_nodeapi()
 * Display blast results for allowed node types
 */
function tripal_analysis_blast_nodeapi(&$node,  $op, $teaser, $page) {

  switch ($op) {
    case 'view':

         if ($teaser) {
            return '';
         }
      // Find out which node types for showing the blast
      $types_to_show = variable_get('tripal_analysis_blast_setting',  
      array('chado_feature'));

      // Abort if this node is not one of the types we should show.
      if (!in_array($node->type,  $types_to_show, TRUE)) {
        break;
      }

         if (strcmp($node->type, 'chado_feature')==0) {
        if ($node->build_mode == NODE_BUILD_SEARCH_INDEX) {
          $node->content['tripal_analysis_blast_index_version'] = array(
                  '#value' => theme('tripal_analysis_blast_results_index_version',  $node),
                  '#weight' => 8,
          );
        } 
        else {
           // Show blast result if not at teaser view
           $node->content['tripal_feature_blast_results'] = array(
                  '#value' => theme('tripal_feature_blast_results',   $node),
                  '#weight' => 8
           );
        }
      }
      break;
  }
}

/**
 * Implements hook_theme_registry_alter().
 */

function tripal_analysis_blast_theme_registry_alter(&$info) {
  // Inject our module into the node theme registry as being an available theme
  // path so that we can override the node template for our content type.
  array_splice($info['node']['theme paths'],   1, 0, array(drupal_get_path('module', 'tripal_analysis_blast')));
}



/**
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 */
function tripal_analysis_blast_theme() {
  $path = drupal_get_path('module', 'tripal_analysis_blast') . '/theme';
  $theme = array(
    'tripal_analysis_blast_results_index_version' => array(
      'arguments' => array('node'),  
    ),  
    'tripal_feature_blast_results' => array(
      'template' => 'tripal_feature_blast_results',  
      'arguments' =>  array('node' => NULL),  
      'path' => $path . '/tripal_feature',  
    ),  
    'tripal_analysis_blast_base' => array(
      'template' => 'tripal_analysis_blast_base',  
      'arguments' =>  array('node' => NULL),  
      'path' => $path . '/tripal_analysis_blast',  
    ),
    // Themed Forms
    'chado_analysis_blast_node_form' => array(
      'arguments' => array('form'),
    ),
  );
  return $theme;
}
/*******************************************************************************
 *  
 */
function tripal_get_feature_blast_results_ajax($feature_id,  $db_id, $max) {
   $sql = "SELECT nid FROM {chado_feature} WHERE feature_id = %d";
   $nid = db_fetch_object(db_query($sql, $feature_id));
   $node = node_load($nid->nid);

   // add the additional variables that the theme needs to generate the output
   $node->db_id = $db_id;
   $node->max = $max;
   // call the theme to rebuild the blast results
   drupal_json(array('update' => theme('tripal_feature_blast_results',  $node)));
}
/*******************************************************************************
 *  
 */
function tripal_analysis_blast_preprocess_tripal_feature_blast_results(&$variables) {
   $feature = $variables['node']->feature;
   $db_id = $variables['node']->db_id; // this value only gets set on an ajax call
  
   $max = 10;
   if (isset($variables['node']->max)) {
      $max = $variables['node']->max;
   }

   $blast_results = tripal_get_feature_blast_results($feature->feature_id,  $db_id, $max);
   if (!is_object($feature->tripal_analysis_blast)) {
     $feature->tripal_analysis_blast = new stdClass;
   }
   $feature->tripal_analysis_blast->blast_results_list = $blast_results;      
}
/*******************************************************************************
 * Prepare blast result for the feature shown on the page
 */
function theme_tripal_analysis_blast_results_index_version($node) {
  $feature = $node->feature;
  $content = tripal_get_blast_results_index_version($feature->feature_id);
  return $content;
}

/*******************************************************************************
 * tripal_get_feature_blast_results()
 * Get blast result from featureprop table for the feature
 */
function tripal_get_feature_blast_results($feature_id, $db_id, $max) {

  // Get the blast results stored as XML from the analysisfeatureprop table
   // the type for the property is named 'analysis_blast_output_iteration_hits'
   // and is found in the 'tripal' controlled vocabulary.  This CV term was
   // added by this module.
   $select = array(
      'analysisfeature_id' => array(
         'feature_id' => $feature_id,
      ),   
      'type_id' => array(
         'name' => 'analysis_blast_output_iteration_hits',  
         'cv_id' => array(
            'name' => 'tripal'
         ),  
      ),           
   );
   $blast_results = tripal_core_chado_select('analysisfeatureprop', array('*'), $select);
   if (!$blast_results) {
      return;
   }

  // get the HTML content for viewing each of the XML file
  $blast_obj_array = array();
  $blast_obj_counter = 0;
  foreach ($blast_results as $index => $analysisfeatureprop) {
      // get the blast XML for this feature
      $blast_xml = $analysisfeatureprop->value;

      // get the analysis record
      $analysisfeature_arr = tripal_core_chado_select('analysisfeature', array('analysis_id'), 
         array('analysisfeature_id' => $analysisfeatureprop->analysisfeature_id));
      $analysis_arr = tripal_core_chado_select('analysis', array('*'), 
         array('analysis_id' => $analysisfeature_arr[0]->analysis_id));
      $analysis = $analysis_arr[0];
      $analysis_id = $analysis->analysis_id;

      // the old style was to store all parameters in a single CV term in the analysisprop 
      // table. However now each property has it's own CV term in that table. But,
      // we still need to support the old method for backwards compatibility.
      // so,  first get the old style variable and see if it has values. In
      // particular we need the database setting
      $blast_settings  = tripal_analysis_get_property($analysis_id, 'analysis_blast_settings');  
      if ($blast_settings) {
       $blastsettings = explode("|",   $blast_settings->value);
         // if we don't have the proper number of fields in the value column then
         // skip this entry
         if (count($blastsettings) != 3) {
           continue;
         }
       $adb_id = $blastsettings[0];
      }
      // if we're not using the old style then try the new method to get the 
      // database id
      else {
         $blastdb = tripal_analysis_get_property($analysis_id, 'analysis_blast_blastdb');
         $adb_id = $blastdb->value;
      }
      // if the callee specified a database to show then we want to check that
      // with the database id of the analysis we're looking at.  If they
      // don't match then skip this blast.  If a database id was not specified
      // then continue
      if ($db_id and $adb_id != $db_id) {
         continue;
      } 

      // get the database
      if ($adb_id) {
        $db_arr = tripal_core_chado_select('db', array('*'), array('db_id' => $adb_id)); 
        $db = $db_arr[0];
      }

      // parse the XML and add it to the array of blast results to be returned
    $blast_obj = tripal_analysis_blast_get_result_object($blast_xml, $db, $max, $feature_id, $analysis);
      $blast_obj->analysis = $analysis;
    $blast_obj_array [$blast_obj_counter] = $blast_obj;
    $blast_obj_counter ++;
  }

   return $blast_obj_array;
}
/*******************************************************************************
 * Scanning the file folder for blast results and prepare content for indexing
 */
function tripal_get_blast_results_index_version($feature_id) {

  // Get cvterm_id for 'analysis_blast_output_iteration_hits' which is required
  // for inserting into the analysisfeatureprop table  
  $sql = "SELECT CVT.cvterm_id FROM {cvterm} CVT ".
         "  INNER JOIN {cv} ON cv.cv_id = CVT.cv_id ".
         "WHERE CVT.name = 'analysis_blast_output_iteration_hits' ".
         "  AND CV.name = 'tripal'";
  $type_id = db_result(chado_query($sql));

  // Get xml string from analysisfeatureprop value column,  get db_id from analysisprop value column
  // ,   and get analysis_id from analysisfeature table
  $sql = "SELECT AP.value AS apvalue,  AFP.value AS afpvalue, AF.analysis_id AS aid
           FROM {analysisfeatureprop} AFP
             INNER JOIN {analysisfeature} AF ON AF.analysisfeature_id = AFP.analysisfeature_id
             INNER JOIN {analysisprop} AP ON AP.analysis_id = AF.analysis_id
           WHERE feature_id = %d
             AND AFP.type_id = %d ";
  $result = chado_query($sql,  $feature_id, $type_id);

  // get the HTML content for viewing each of the XML file
  while ($analysisfeatureprop = db_fetch_object($result)) {
    // get analysis name and date    
    $sql = "SELECT analysis_id AS aid,  name, to_char(timeexecuted, 'MM-DD-YYYY') AS time
            FROM {analysis}               WHERE analysis_id = %d";
    $analysis = db_fetch_object(chado_query($sql,  $analysisfeatureprop->aid));
    

    $blastsettings = explode("|",   $analysisfeatureprop->apvalue);
    $att_db_id = $blastsettings [0];

    // Get db object using the db_id    
    $sql = "SELECT * FROM {db} WHERE db_id=%d";
    $db = db_fetch_object(chado_query($sql,  $att_db_id));
    
    // Only index best 10 hits because the default page only shows 10 blast results
    $max = 10;
    $content .= parse_NCBI_Blast_XML_index_version($analysisfeatureprop->afpvalue, $db, $max, $feature_id, $ajax, $analysis);
      
  }
  return $content;

}




/*******************************************************************************
 *  Provide information to drupal about the node types that we're creating
 *  in this module
 */
function tripal_analysis_blast_node_info() {
  $nodes = array();
  $nodes['chado_analysis_blast'] = array(
      'name' => t('Analysis: Blast'),  
      'module' => 'chado_analysis_blast',  
      'description' => t('A blast analysis from the chado database'),  
      'has_title' => FALSE,
      'title_label' => t('Analysis: Blast'),  
      'has_body' => FALSE,
      'body_label' => t('Blast Analysis Description'),  
      'locked' => TRUE
  );
  return $nodes;
}




/*******************************************************************************
 *  When a node is requested by the user this function is called to allow us
 *  to add auxiliary data to the node object.
 */
function chado_analysis_blast_load($node) {

   // load the default set of analysis fields
  $additions = chado_analysis_load($node);

   // create some variables for easier lookup
   $analysis = $additions->analysis;
   $analysis_id = $analysis->analysis_id;

   $blast_settings  = tripal_analysis_get_property($analysis->analysis_id, 'analysis_blast_settings');  
   $blastdb         = tripal_analysis_get_property($analysis->analysis_id, 'analysis_blast_blastdb');
   $blastfile       = tripal_analysis_get_property($analysis->analysis_id, 'analysis_blast_blastfile');  
   $blastparameters = tripal_analysis_get_property($analysis->analysis_id, 'analysis_blast_blastparameters');
   $no_parsed       = tripal_analysis_get_property($analysis->analysis_id, 'analysis_blast_no_parsed');  
   $query_re        = tripal_analysis_get_property($analysis->analysis_id, 'analysis_blast_query_re');  
   $query_type      = tripal_analysis_get_property($analysis->analysis_id, 'analysis_blast_query_type');  
   $query_uniquename= tripal_analysis_get_property($analysis->analysis_id, 'analysis_blast_query_uniquename');  
   $blastfile_ext   = tripal_analysis_get_property($analysis->analysis_id, 'analysis_blast_blastfile_ext');  
   $is_concat       = tripal_analysis_get_property($analysis->analysis_id, 'analysis_blast_is_concat');  
   $search_keywords = tripal_analysis_get_property($analysis->analysis_id, 'analysis_blast_search_keywords');
   
   if (!is_object($analysis->tripal_analysis_blast)) {
     $analysis->tripal_analysis_blast = new stdClass;  
   }
   
   $analysis->tripal_analysis_blast->blastdb         = $blastdb->value;
   $analysis->tripal_analysis_blast->blastfile       = $blastfile->value;  
   $analysis->tripal_analysis_blast->blastparameters = $blastparameters->value;
   $analysis->tripal_analysis_blast->no_parsed       = $no_parsed->value;  
   $analysis->tripal_analysis_blast->query_re        = $query_re->value;  
   $analysis->tripal_analysis_blast->query_type      = $query_type->value;  
   $analysis->tripal_analysis_blast->query_uniquename= $query_uniquename->value;  
   $analysis->tripal_analysis_blast->blastfile_ext   = $blastfile_ext->value;  
   $analysis->tripal_analysis_blast->is_concat       = $is_concat->value;  
   $analysis->tripal_analysis_blast->search_keywords = $search_keywords->value;

   // get the database information so that we don't have to require callers
   // to do the lookup
   $select = array('db_id' => $blastdb->value);
   $analysis->tripal_analysis_blast->db = tripal_core_generate_chado_var('db',  $select);

   // if there is an old style 'blast_settings' array,  then break these out for
   // use in the new format
   if (count($blast_settings) > 0) {
     $prop_values = explode("|", $blast_settings->value);
      $analysis->tripal_analysis_blast->blastdb = $prop_values[0];
      $analysis->tripal_analysis_blast->blastfile = $prop_values[1];
      $analysis->tripal_analysis_blast->blastparameters = $prop_values[2];
   } 

  return $additions;
}
/**
*
*/
function chado_analysis_blast_insert($node) {

  // get the analysis_id from the node before the call below
  $analysis_id = $node->analysis_id;
  
  // insert the analysis. If the analysis already exist then this
  // call will link it to a new Drupal node. It will also add the 
  // analysis_id field to the $node object.
  chado_analysis_insert($node);
  
 
  // If this analysis already exists then don't recreate it in chado. This can happen
  // when nodes are synced.  They already exist but Drupal doesn't know it and calls 
  // this function.
  if (!$analysis_id) {   
    
    // now add in the remaining settings as a single property but separated by bars
    tripal_analysis_insert_property($node->analysis_id, 'analysis_blast_blastdb',          $node->blastdb);
    tripal_analysis_insert_property($node->analysis_id, 'analysis_blast_blastfile',        $node->blastfile);  
    tripal_analysis_insert_property($node->analysis_id, 'analysis_blast_blastparameters',  $node->blastparameters);  
    tripal_analysis_insert_property($node->analysis_id, 'analysis_blast_no_parsed',        $node->no_parsed);  
    tripal_analysis_insert_property($node->analysis_id, 'analysis_blast_query_re',         $node->query_re);  
    tripal_analysis_insert_property($node->analysis_id, 'analysis_blast_query_type',       $node->query_type);  
    tripal_analysis_insert_property($node->analysis_id, 'analysis_blast_query_uniquename', $node->query_uniquename);  
    tripal_analysis_insert_property($node->analysis_id, 'analysis_blast_blastfile_ext',    $node->blastfile_ext);  
    tripal_analysis_insert_property($node->analysis_id, 'analysis_blast_is_concat',        $node->is_concat);  
    tripal_analysis_insert_property($node->analysis_id, 'analysis_blast_search_keywords',  $node->search_keywords);  
    
    // submit the parsing jobs
    chado_analysis_blast_submit_jobs($node);
  }
}
/**
 * 
 */
function chado_analysis_blast_update($node) {

  // update the anlaysis
  chado_analysis_update($node); 

  // add the blast settings
  tripal_analysis_update_property($node->analysis_id, 'analysis_blast_blastdb',          $node->blastdb, 1);
  tripal_analysis_update_property($node->analysis_id, 'analysis_blast_blastfile',        $node->blastfile, 1);  
  tripal_analysis_update_property($node->analysis_id, 'analysis_blast_blastparameters',  $node->blastparameters, 1);  
  tripal_analysis_update_property($node->analysis_id, 'analysis_blast_no_parsed',        $node->no_parsed, 1);  
  tripal_analysis_update_property($node->analysis_id, 'analysis_blast_query_re',         $node->query_re, 1);  
  tripal_analysis_update_property($node->analysis_id, 'analysis_blast_query_type',       $node->query_type, 1);  
  tripal_analysis_update_property($node->analysis_id, 'analysis_blast_query_uniquename', $node->query_uniquename, 1);  
  tripal_analysis_update_property($node->analysis_id, 'analysis_blast_blastfile_ext',    $node->blastfile_ext, 1);  
  tripal_analysis_update_property($node->analysis_id, 'analysis_blast_is_concat',        $node->is_concat, 1);  
  tripal_analysis_update_property($node->analysis_id, 'analysis_blast_search_keywords',  $node->search_keywords, 1);  

  // if this analysis uses the old style blast settings cvterm then remove that term
  $old = tripal_analysis_get_property($node->analysis_id, 'analysis_blast_settings');
  if (count($old) > 0) {
     tripal_analysis_delete_property($node->analysis_id, 'analysis_blast_settings');
  }

  // submit the parsing jobs
  chado_analysis_blast_submit_jobs($node);
}
/**
*
*/
function chado_analysis_blast_submit_jobs($node) {
   global $user;

   // add a job if the user wants to parse the XML        
  if ($node->blastjob) {
      $job_args = array(
          $node->analysis_id,
          $node->blastdb,
          $node->blastfile,
          $node->no_parsed,
          $node->blastfile_ext,
          $node->query_re,
        $node->query_type,  
          $node->query_uniquename,
          $node->is_concat,
          $node->search_keywords,
      );

    if (is_readable($node->blastfile)) {
      tripal_add_job("Parse blast: $node->blastfile",  'tripal_analysis_blast',
                          'tripal_analysis_blast_parseXMLFile',   $job_args, $user->uid);
    } 
    else {
      drupal_set_message(filter_xss(t("Blast output file,  $node->blastfile, is not readable 
           by the server.  Check existence of file and file permissions. 
           Job not scheduled.")));
    }
  }
   // add a job if the user wants to create a best hits report.
  if ($node->blastbesthit) {
      $j_args[0] = $node->analysis_id;  
    tripal_add_job("Parse best hit: $node->blastfile",  'tripal_analysis_blast',
                     'tripal_analysis_blast_parse_best_hit',   $j_args, $user->uid);      
   }
    
}
/*******************************************************************************
 * Delete blast anlysis
 */
function chado_analysis_blast_delete($node) {
  chado_analysis_delete($node);
}

/*******************************************************************************
 *  This function customizes the view of the chado_analysis node.  It allows
 *  us to generate the markup.
 */
function chado_analysis_blast_view($node,  $teaser = FALSE, $page = FALSE) {
  // use drupal's default node view:
    //dprint_r($node);
  if (!$teaser) {
    $node = node_prepare($node,  $teaser);
    // When previewing a node submitting form,  it shows 'Array' instead of
    // correct date format. We need to format the date here
    $time = $node->timeexecuted;
    if (is_array($time)) {
      $month = $time['month'];
      $day = $time['day'];
      $year = $time['year'];
      $timestamp = $year . '-' . $month . '-' . $day;
      $node->timeexecuted = $timestamp;
    }
    // When viewing a node,  we need to reformat the analysisprop since we
    // separate each value with a bar |
    if (preg_match("/.*\|.*\|.*/",  $node->blastdb)) {
      $prop_values = explode("|", $node->blastdb);
      $node->blastdb = $prop_values[0];
      $node->blastfile = $prop_values[1];
      $node->blastparameters = $prop_values[2];
    }
  }
  return $node;
}

/*******************************************************************************
 * Set the permission types that the chado module uses.  Essentially we
 * want permissionis that protect creation,  editing and deleting of chado
 * data objects
 */
function tripal_analysis_blast_perm() {
  return array(
      'access chado_analysis_blast content',  
      'create chado_analysis_blast content',  
      'delete chado_analysis_blast content',  
      'edit chado_analysis_blast content',  
  );
}

/*******************************************************************************
 *  The following function proves access control for users trying to
 *  perform actions on data managed by this module
 */
function chado_analysis_blast_access($op,  $node, $account) {
  if ($op == 'create') {
    if (!user_access('create chado_analysis_blast content',   $account)) {
      return FALSE;
      }
  }
  if ($op == 'update') {
    if (!user_access('edit chado_analysis_blast content',   $account)) {
      return FALSE;
    }
  }
  if ($op == 'delete') {
    if (!user_access('delete chado_analysis_blast content',   $account)) {
      return FALSE;
    }
  }
  if ($op == 'view') {
    if (!user_access('access chado_analysis_blast content',   $account)) {
         return FALSE;
      }
  }
   return NULL;
}

/**
 *
 *
 * @ingroup tripal_feature
 */
function tripal_analysis_blast_job_describe_args($callback, $args) {

   $new_args = array();
   if ($callback == 'tripal_analysis_blast_parseXMLFile') {

      // add in the analysis 
      if ($args[0]) {
         $analysis = tripal_core_chado_select('analysis', array('name'), array('analysis_id' => $args[0]));
      }
      $new_args['Analysis'] = $analysis[0]->name;

      // add in the database 
      if ($args[1]) {
         $db = tripal_core_chado_select('db', array('name'), array('db_id' => $args[1]));
      }
      $new_args['Database'] = $db[0]->name;

      $new_args['File or Directory Name'] = $args[2];
      if ($args[8] == 1) {
        $new_args['Is XML file concatenated'] = 'Yes';
      } 
      else {
        $new_args['Is XML file concatenated'] = 'No';
      }
      $new_args['File Extension (if directory)'] = $args[4];
      $new_args['Number matches parsed per query'] = $args[3];
      $new_args['Query name regular expression'] = $args[5];
      $new_args['Query type'] = $args[6];
      if ($args[7] == 1) {
        $new_args['Feature identifier'] = 'feature unique name';
      } 
      else {
        $new_args['Feature identifier'] = 'feature name';
      }
      if ($args[9]) {
         $new_args['Tripal Views Integration'] = 'Yes';
      } 
      else {
         $new_args['Tripal Views Integration'] = 'No';      
      }
   }
   return $new_args;
}

/**
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $form_id
 */
function tripal_analysis_blast_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "tripal_analysis_blast_settings_form") {    
    // updating the form through the ahah callback sets the action of
    // the form to the ahah callback URL. We need to set it back
    // to the normal form URL
    $form['#action'] = url("admin/tripal/tripal_analysis/tripal_blast_analysis");
  }
}