<?php
/*******************************************************************************
 *  Provide a Blast Analysis form
 */
function chado_analysis_blast_form($node, $form_state) {

  // add in the default fields
  $form = chado_analysis_form($node, $form_state);

  // set the default values
  $blast = $node->analysis->tripal_analysis_blast;

  $blastdb = $blast->blastdb;
  $blastfile    = $blast->blastfile;
  $blastfile_ext    = $blast->blastfile_ext;
  $blastparameters = $blast->blastparameters;

  $query_re = $blast->query_re;
  $query_type = $blast->query_type;
  $query_uniquename = $blast->query_uniquename;
  $is_concat = $blast->is_concat;
  $search_keywords = $blast->search_keywords;

    
  $form['blast'] = array(
      '#title' => t('Blast Settings'),  
      '#type' => 'fieldset',  
      '#description' => t('Specific Settings for Blast Analysis.'),  
      '#collapsible' => TRUE,
      '#attributes' => array('id' => 'blast-extra-settings'),  
      '#weight' => 11
  );
  
  // get a list of db from chado for user to choose
  $sql = 'SELECT db_id,  name FROM {db} ORDER BY lower(name)';
  $results = chado_query($sql);
  
  $blastdbs = array();
  while ($db = db_fetch_object($results)) {
    $blastdbs[$db->db_id] = $db->name;
  }
  $form['db_options'] = array(
      '#type' => 'value',  
      '#value' => $blastdbs
  );
  $form['blast']['blastdb'] = array(
      '#title' => t('Database'),  
      '#type' => 'select',  
      '#description' => t('The database used for the blast analysis. If the database does not appear in this list, please ') . 
        l(t('add a new database.  '), 'admin/tripal/tripal_db/add_db', array('attributes' => array('target' => '_blank')) ) . 
        t('Each database may have a different format for each match. This blast module will attempt to extract the match name,
         match accession, and organism from each match.  To ensure the parser is able to properly extract
         this information. Please set the proper regular expression values on the ') . 
         l(t('Blast Settings page. '), 'admin/tripal/tripal_analysis/tripal_blast_analysis',array('attributes' => array('target' => '_blank'))  ) .
         t('Databases from NCBI have a built-in parser. On the Blast Settings page, simply click the box "Use Genebank style parser"'), 
      '#options' => $form['db_options']['#value'],  
      '#default_value' => $blastdb,
  );

  $form['blast']['blastfile'] = array(
      '#title' => t('Blast XML File/Directory: (if you input a directory without the tailing slash,  all xml files in the directory will be loaded)'), 
      '#type' => 'textfield',  
      '#description' => t('The xml output file generated by blast in full path.'),  
      '#default_value' => $blastfile,
  ); 
   $form['blast']['blastfile_ext'] = array(
      '#title' => t('Blast XML file extension'),  
      '#type' => 'textfield',  
      '#description' => t('If a directory is provide for the blast file setting above,  then a file extension can be provided here. Files with this extension in the directory will be parsed.  If no extension is provided then files with a .xml extension will be parsed within the directory. Please provide the extension without the preceeding period (e.g. "out" rather than ".out"'), 
      '#default_value' => $blastfile_ext,
  );
  $form['blast']['is_concat'] = array(
      '#title' => t('Is the XML file concatenated?'),  
      '#type' => 'checkbox',  
      '#description' => t('Is the XML file a set of concatenated XML results?  Such is the case,  for instance, if <a href="http://www.blast2go.org/">Blast2GO</a> was used to generate the blast results. If
      NCBI BLAST was used with output in XML then this options should not be checked.'),  
      '#default_value' => $is_concat,
  );
  $form['blast']['no_parsed'] = array(
    '#title' => t('Number of hits to be parsed'),  
      '#type' => 'textfield',  
      '#description' => t("The number of hits to be parsed. Tripal will parse only top 10 hits if you input '10'' in this field. Enter the text 'all' to parse all hits. Default is to parse only the top 25 hits per match."),  
      '#default_value' => '25',  
  );

  $form['blast']['query_re'] = array(
      '#title' => t('Query Name RE'),  
      '#type' => 'textfield',  
      '#description' => t('Enter the regular expression that will extract the '.
         'feature name from the query line in the blast results. This should be '.
         'the same as the definition line in the query FASTA file.  This option is '.
         'is only required when the query does not identically match a feature '.
         'in the database.'),  
      '#default_value' => $query_re,
  );

  $form['blast']['query_type'] = array(
      '#title' => t('Query Type'),  
      '#type' => 'textfield',  
      '#description' => t('Please enter the Sequence Ontology term that describes '.
         'the query sequences used for blasting.  This is only necessary if two '.
         'or more sequences have the same name.'),  
      '#default_value' => $query_type,
  );

  $form['blast']['query_uniquename'] = array(
      '#title' => t('Use Unique Name'),  
      '#type' => 'checkbox',  
      '#description' => t('Select this checboxk if the query name in the blast file '.
        'matches the uniquename of the feature.  By default,  the blast results will '.
        'mapped to the "name" of the feature.'),  
      '#default_value' => $query_uniquename,
  );

  $form['blast']['blastparameters'] = array(
      '#title' => t('Parameters'),  
      '#type' => 'textfield',  
      '#description' => t('The parameters for running the blast analysis.'),  
      '#default_value' => $blastparameters,
  );
  
  $form['blast']['blastjob'] = array(
      '#type' => 'checkbox',  
      '#title' => t('Submit a job to parse the xml output into Chado'),  
      '#description' => t('Note: features associated with the blast results must '.
                          'exist in chado before parsing the file. Otherwise,  blast '.
                          'results that cannot be linked to a feature will be '.
                          'discarded. '),  
      '#default_value' => $blastjob
  );
   
  $search_keywords_options = array(
     'blast_match_name' => '*The match name (property name: blast_match_name)',  
     'blast_match_description' => '*The match description (property name: blast_match_description)',       
     'blast_match_organism' => '*The organism the match belongs to. (property name: blast_match_organism)',  
      'blast_match_accession' => '*The accession of the match. (property name: blast_match_accession)',  
     'blast_database' => 'The name of the database blasted against (property name: blast_database)',       
//     'blast_evalue' => 'The match e-value score (property name: blast_evalue)',  
//     'blast_score' => 'The match bit score (property name: blast_score)',  
//     'blast_pid' => 'The match percent identity (property name: blast_pid)',       
  );
  $form['blast']['search_keywords'] = array(
      '#type' => 'checkbox',  
      '#description' => t('By default the blast results will be available for Drupal-style 
         search indexing. However,  custom searching can be made available to site visitors using 
         the Tripal Views module.  Some fields can only be identified in the blast results if the 
         database record in Tripal is properly configured. Navigate to Administer -> 
         Tripal Management -> Analysis and look for the \'Tripal Blast\' section. Select 
         the database that these blast results belong to. Be sure
         to set the regular expressions for identifying the match name,  accession, description and 
         organism.  When constructing a materialized view for these data,  or for setting a 
         search filter in Drupal Views,  use the property names indicated in parentheses above. These
         results will be housed in the analysisfeatureprop table of Chado.'),  
      '#title' => t('Keywords For Custom Search'),  
      '#default_value' => $search_keywords,
      '#description' => t('Parse blast results for integration with Tripal Views'),  
  );
  
  return $form;
}
/**
*
*/
function chado_analysis_blast_validate($node,  &$form) {
   // use the analysis parent to validate the node
   tripal_analysis_validate($node,  $form); 
}

/*
 *
 */
function theme_chado_analysis_blast_node_form($form) {

  $properties_table = tripal_analysis_theme_node_form_properties($form);
  $markup .= $properties_table;

  $form['properties']['table'] = array(
    '#type' => 'markup',
    '#value' =>  $markup,
    '#prefix' => '<div id="tripal-analysis-edit-properties-table">',
    '#suffix' => '</div>',
  );
  $form['buttons']['#weight'] = 50;
  return drupal_render($form);
}